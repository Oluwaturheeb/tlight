<?php
require_once "Autoload.php";

$title = "Docs";
require_once "inc/header.php";
?>
	<nav class="">
		<div class="logo">
			<a href="/" class="logo">
				tlight
			</a>
		</div>
		<div class="dp-menu">
			<span></span>
			<span></span>
			<span></span>
		</div>
		<div class="links">
			<div class="menu-link">
				<a href="/">Home</a>
				<a href="/about">About</a>
				<a href="/contact">Contact</a>
			</div>
			<div class="dp-link">
				<a href="/docs">Doc</a>
			</div>
		</div>
	</nav>
	<article class="container">
		<?php
			$doc = <<<'here'
			<section>
	 			<h1>Tlight Documentation</h1>
				<h3>Folder structure</h3>
				<b>auth</b> (folder)
				<b>components</b> (folder)
				<b>pages</b> (folder)
				<i>.htaccess</i> (file)
				<i>setup.php</i> (file);
				<i>config.php</i> (file)
				<h3>Auth folder</h3>
				The auth folder contains the default login system bundled with <b>Tlight</b>. It contains:
				<i>login.php</i> (file)
				<i>request.php</i> (file)
				The login.php file can be included anywhere including a div tag and the <i>request.php</i> files handles the login requests.
				<h3>Components folder</h3>
				The components folder contains all the classes that makes Tlight, <b>Tlight</b>.
				<h3>The files</h3>
				The <i>.htaccess</i> file and <i>setup.php</i> file are not to be edited as it contains sensitive information that can destabilize the application.
				The config file should be reviewed as it holds important configuration file for the application.
				<h3>Pages folder</h3>
					This folder holds all the pages of the project to be created!
			</section>
			<section>
				<h1>Starting a project</h1>
				To start an project we need to first edit the <i>config.php</i> file and change all that we needed to change.

				<i>Important constanst</i>
				const PNAME -> holds the application given name
				const jq -> lead directly to the jquery file in assets folder(in case you want to use jQuery lib)
				const js -> the path to the js file folder but needed a file appended to it aas its only a path to the js folder
				const style -> this also leads to the css folder
				
				You don't need to create a database yourself just open the <i>Config.php</i> file and make changes the run.
				<code>$ php setup.php -i</code>
				If successful you get a "setup completed" message.
				What does this means!
				Tlight comes with its own login system so it creates a table named <i>auth and relation</i> that helps in managing inter table relationship.
				After has been created you can start coding, and you might want to use the default template to relieve you of creating files.
				I have created a project skeleton just for you, just run:
				<code>$ php setup.php template</code>
				This will create some files in the <b>pages</b> folder. The files include <i>index.php, create.php, post.php, logout.php, admin.php, delete.php, update.php</i> and this files contains functionality to help you get familiar with <b>Tlight</b>.
				And any other files to be created should always start with requiring the <i>Autoload.php file</i> 
				</p>
			</section>
			<section>
				<h1>Db class</h1>
				To use this class you need to initialize it first
				<code>$d = Db::instance();</code>
				And to access the methods is a piece of cake!
				First set the table!
				<code>
					$d->table("user");
				</code>
				<u>To insert data into the database</u>
				<code>
					$d->add(["columns"], ["value"]);
				</code>
				<code>
					$new_data = $d->add(["username"], ["tlight"])->res();
				</code>
				I use res here to excute the query being generated by the add method. the point in assigning this to a variable is bcus the add method is going to return the inserted data id, but not necessary to assign. 
				<u>To get data</u>
				This get all rows from table user
				<code>$data = $d->get()->res();</code>
				<u>Specifying columns</u>
				<code>
					$data = $d->get(["id", "fullname"])->res();
					<i>// $data now holds the result of the query!</i>
				</code>
				<u>With where clause</u>
				<code>
					$data = $d->get(["id", "fullname"])
					->where(6)
					->res();
				</code>
				The above return object containing id and fullname of user id = 1
				We can also have something like this 
				<code>
					$data = $d->get(["id", "fullname"])
						->where(["name", "tlight"])
						->res();
						<i>// or</i>
					
					$data = $d->get(["id", "fullname"])
						->where(["id", ">", "2"])
						->res();

						<i>// or</i>
					
					$data = $d->get(["id", "fullname"])
						->concat("or")
						->where(2, ["fullname", "tlight"])
					
						<i>// or</i>
					
					->where(2, ["fullname", "=", "tlight"])
						->res();
					<i>
					/*
					
					1) the where results to "name = tlight";
					
					2) the where results to "id > 2"
					
					3) this mays look complicated of some sort but lets break it down.
					
					a) i added a concat method to the initial methods this is because the argument passed to where method is more than 1 and the concat method has a default of "and" 
					
					so if not called we are going to have something like "id = 2 and fullname = tlight" but in this case we have "id = 2 or fullname = tlight"
					
					b) anytime we are passing an array to the where method note
					
					where(['name', 'tlight']) ---> gives us "name = tlight"
					where(['name', "!=" 'tlight']) ---> gives us "name != tlight"
					
					there are still some more complicated where parameters but for now its ok
					
					*/
					</i>
				</code>
				<u>We can apply sorting</u>
				<code>
					$data = $d->get(['name'])->sort()
					$data = $d->get(['name'])->sort("col", "order");
				</code>
				By default the sort method is set to <i>sort("id", "desc");</i>
				so we can have something like the following */
				<code>
					<i>// this sort by id desc</i>
					
					$data = $d->get(['name'])->sort();
					
					<i>// this sort by name desc</i>
					
					$data = $d->get(['name'])->sort("name");
					
					<i>// this sort by name asc</i>
					
					$data = $d->get(['name'])->sort("name", "asc");
					
					<i>// in any case it should be use after the where method if the where method is going to be called</i>
					
					<i>// we also have pagination ready to use</i>
					
					$data = $d->get()->pages(10);
					
					<i>// the above load 10 per page</i>
				</code>
				<h3>Joins and Union</h3>
				
				<code>
					<i>// to use any of this two the table method will now accept and array instead of string!</i>
					
					$d->table(["user", "post"]); # and more tables
					
					$d->get(["name", "title"])
					->use("join", ['left']) 
					->match([["a.id", "user"]])
					->res();
				</code>
					<u>The use method</u>
					It can be use with joins and union.
					When using it with join it take 2 parameter 
					<ul>
						<li> specifying what to use in this case join<li>
						<li> then the type of join in an array</li>
					</ul>
					the match method handles the join predicate, it take a multi-dimensional array but if the column to match are the same it take a single array e.g
				<code>					
					match([["id", "user"]]) || match([["id", "!=", "user"]]) or match(["id"])
					<i>// and where, sort, pages method can also be attached to it</i>
				</code>
				<h3>Union</h3>
				The use method in this case takes a single argument which specify that we are using union!
				the get method also take multiple array according to the number of tables
				the where in this method takes a multi-dimentional array and d number of the table must correlate with the number of the array
				<code>
					$d->get(["name"], ['title'])
					->use("union")
					->where([], [["name", "tee"]])
					->res();

					
					<i>/*
					Note: in every case the where should be called for the union and if the query doesnt have a clause call the where method with empty arrays correlating with the number of table used
					*/
					</i>
					where([["name", "tlight"]], [["title", "post 1"]]);
				
				</code>
				<h3>Update</h3>
				The set method is use to update data and it acccepts the array of columns and array of values to set
				<code>
					set(['name', 'age'], ['tlight', 25]);
					<i>// you can call the where method to specify column</i>
					$d->set(['name', 'age'], ['tlight', 25])
					->where(10) <i>// this assumes id</i>
				</code>
				<h3>CustomQuery</h3>
				The customQuery accept 2 arguments the sql and the value, since we are using the pdo method for the db we need to change every assignment to
				<code>
					$d->customQuery("select * from profile where id = ? and name = ?", [2, "tlight"]);
				</code>
				<h3>Where</h3>
				Let's talk about the where method now 
				
				<code>
					where(2)
					<i>// this mean id = 2</i>
					where(['name', 'tlight'])
					<i>// this mean no assignment and the assignment fall backs to "=". so we have "name = tlight"</i>
					where(["name"])
					<i>// in this case it means you are to use this with sub method</i>
					where(['name', '=', 'tlight'])
					<i>// assignment given here so we have "name = tlight"</i>
					where([["name", "age"], "tlight"]);
					<i>// this is given in a situation where by we want to check a value against two column this is going to give us "(name = tlight or age = tlight)" by default we use 'or' to build the where but it can also be overwritten e.g</i>
					
					where([["name", "age"], ["and", "="], "tlight"])
					<i>//and the result is "(name = tlight and age = tlight)" the assignment operator provided is going to be used for both columns</i>
				</code>

				<h3>Subquery</h3>
				First we need to build a normal query by using the get method
				<code>
					$d->table("post")
					
					$data = $d->get(["title"])->where(["user"])
					<i>// the where should always look like this except if outer query</i>
				</code>
			</section>
			<section>
				<h1>The Easy class</h1>
				<i>Note this class extends class Validate and all methods in this class uses the Validate::req() method to ease writing of code</i>.

				Lets get started by initializing the class
				<code>
				$e = new Easy();
				</code>
				We need to set the table to work with!
				<code>
					$e->table("profile") <i>// string</i>
				</code>
				<h3>Create</h3>
				This method doesn't take any arguments.
				<code>
					$e->create();
				</code>
				<h3>Fetch</h3> 
				This method takes two argument
				<ul>
					<li>Columns to select - Optional
					The default selection is to select all but this can be overridden by specifying the columns to select.
					</li>
					<li>Where clauses - Optional
					There should be provided like in the db where method e.g ["user", "=", 10].
					And if where is more than 1, the default is to use "and" to join the clauses but it can also be overridden by add the the concat at the end of the clauses as a string e.g fetch(["*"], ["name", "=", "tlight"], ["id", "=", 2], "or");
					</li>
				</ul>
				<h3>Update</h3>
					This method just like the fetch method, arguments are optional.
				 	The column names only if the form/url names/keys doesnt match what is in the db
				 	And the where, exactly just like the fetch method.
					<code>
						$e->update();
							<i>// or </i>
						$e->update([], ["id", "=", 1])
					</code>
				</p>
				<h3>Delete</h3>
				let say the url have
				
					** id=1&user=10
				
					breaking it to where id = 1 and user = 10;
					but the "and" can be overridden to have like eg
					<code>
						<i>// no argument at all </i>
					
						$e->del();
						
						<i>// or</i>
						
						$e->del("or")
						<i>// other argument are optional</i>
						<i>// or </i>
						$e->del("or", ["id", "user"], ["<", ">"]);
					<i>/*
						in this case the column only means if the form/url names/keys doesnt match what is in the db 
						and operator means we can change from the assignment to any operator we want
						*/</i>
					</code>
					<h3>With</h3>
					The with method is a blessing to this class, i cant explain it only via code.
					This method takes 2 or 3 arguments with condition e.g
					<code>
						<i>The first argument is a string defining why you want to use this method.
						The first argument option includes:
						pages, this makes the method to accept int value as the 2nd arg specifying how many per page, no default.</i>
						$e->fetch()->with("pages", 10);
						<i> // for fetch only
						append, in case you want to add to the incoming request e.g i use to turn title into url but i cant do that anymore since the request cant be edited, so the with method comes my aid.</i>
						$e->insert()->with("append", ["url"], [Utils::slug($_POST["title"])])->exec();
						<i> // this appended value is not validated by tlight, you have to do so yourself.
						// all methods can use it
						</i>
						<i>//remove, you also remove from the request object.</i>
						$e->(remove, ["id"])
						<i>// all methods
						// use, this option is only for update method, in case whereby the value to use for where is already appended to the form or url, just give the input/url name and thats it.</i>
						$e->update()->with("use", ["id"]);
						<i>change, to change the column in case the doesnt match what you have in db, provide all the col name according to how the input fields is listed.</i>
						$e->fetch()->with("change", [id, name]);
					</code>
					The with method can be called as many times as possible till it suites your needs.
					<h3>Exec</h3>
					This method execute all queries generated by insert, fetch, delete, update and takes option parameter true to return the first result.
			 	</section>
				<section>
					<h1>The Auth class</h1>
					<i>"I have build many login system but this, i am kinda proud of it!"</i>
					As part of the Auth class, there is an html file attached for login, register, lost password and change password all this forms are all in the auth/login.php file. And the <i>Config.php</i> file has the the settings for login, it should be reviewed. The <i>login.php</i> can be included in a div tag or in a whole webpage the choice is yours. Ajax handles the submission and auth/request.php handles the request. assets/css/app.css for styles and assets/js/app.js for javascript.
					<code>
					<i>// lets initialize our class</i>
					$a = new Auth();
					</code>
					<h3>Login</h3>
					Since protecting password is a big deal this days and changing password regularly is recommend by all security expert i implemented changing of password with the login method, so the <i>config.php</i> file under auth there is last_pc option default to 30 which means after 30days the user should change password. It can be set to 0 or false to disable password change option.
					
					Also its worth mentioning the login_attempts option can also be toggled, when login attempts reach the limit given the program shows a captcha for the user.
				<code>
				$a->login();
				<i>// or </i>
				$a->login(["random-email", "random-password"]);
				<i>// the column only if the input doesn't match the db column
					/*
					anytime using any method in this class its recommended to assign a variable to the method call!
					*/</i>
				</code>
				<h3>Reg</h3>
				<code>
					$reg = $e->reg(); 
					<i>// no argument or could be optional column</i>
					$reg = $a->reg(["some columns"])
					<i>// the column only if the input fields doesn't match the db column.</i>
				</code>
				<h3>Set</h3>
				The set method accepts a single optional value to set user session, default  to "user"
				The set method works only with login and reg
				It evaluates what the result of both method returns and calculate the last log indays and also set session
				It returns "ok" on success, "change" if the password change calculated is over the given value and also the variable assigned should be echoed for the error
				<code>
					$reg = $a->reg()->set();
					$log = $a->login()->set();
					<i>// in the wake one may like to use $result instead of set() method to return the result of the login or reg method.</i>
					$log = $a->login()->result;
				</code>				
				<h3>Change password</h3>
				This method is called to change or update password!
				// takes single optional value to get user session key default  to "user"
				<code>
					$ch = $a->chpwd();
				</code>
				<h3>Lost password</h3>
				Still working on this method, as it requires sending email not until i tested it i won't recommend using it.
				<code>
					$e->lpass();
				</code>
			</section>
			<section>
			 <h1>The Rel class</h1>
			 This class handles relationship between two tables. And to use this Class relationship must have been defined. To set relationship between two tables run:
			 <code>
			 	$ php setup.php rel post/comment id/p_id delete-cascade/update-null
			 </code>
			 The above code means we are telling tlight that we want to setup relationship "rel", and the tables involved post and comment table and we are also that if the post is deleted the comments too should follow suit and if update nothing should happen.
			 **Note: 
			 Tables must have been created and also the parent table column should be the primary key in this case blog.
			 The option to use fot the 3rd argument is as follow:
			 delete-[cascade, null, restrict]
			 update-[cascade, null, restrict]
			 And in actual null and restrict does the thing!
			 
			 Now we can use lets code.
			 <code>
			 	<i> // initialize the class</i>
			 	$r = new Rel();
			 	<i>// setting the table</i>
			 	$r->table(["post", "comment"]);
			 	//getting data now
			 	$r->fetch(["title", "url"])
			 	</code>
			</section>
			<section>
				<h1>The validate class</h1>
				The validate class handles everything that has to do validation as the the name suggest. It also handles file uploads, generating and validating of the csrf token for forms.
				<h3>Validator method</h3>
				This method takes 2 arguments
				<ul>
					<li>The request object</li>
					<li>The set of rules for each request</li>
				</ul>
				<code>
					<i>// lets intialize our class</i>
					$v = new Validate();
					<i>// now the validator method</i>
					$v->validator($_POST, [
						"name" => [
							"required" => true,
							"min" => 8,
							"max" => 100
						],
						"id" => [
							"required" => true,
							"number" => true
						]
					]);

					<i>/*
						Assuming that we have an incoming post request containing
						Array(name => tlight, id => 2)
						The rules given above will be applied and and if the request fails to meet up with rules then errors will be given.
						And the error can be collected via $v->error();
						*/
					</i>
				</code>
				The set of rules the validator takes is as follow:

				<ul>
					<li>Required
						This means the field given must not be empty.
					</li>
					<li>Csrf
						Validate the csrf included in the form
					</li>
					<li>Email
						Check if the input value is an email
					</li>
					<li>Match
						In case you want to check for password match i.e change password form
						this rule takes the other input name holding the input values e.g
						password => [
							"match" => v_password
						]
					</li>
					<li>Max
						This checks if the input is string and count every character it contains and if exceed the given rule, then error is emitted.
						And if the value is numeric and is greater than the give rule, error is emitted also.
					</li>
					<li>Min
						This checks if the input is string and count every character it contains and if less than the given rule, then error is emitted.
						And if the value is numeric and is less than the give rule, error is emitted also.
					</li>
					<li>Number
						This checks if the input value is number
					</li>
					<li>Wordcount
						count the words in an input and throw error if the result is less than the given rule
					</li>
					<li>Multiple
						This is useful in a situation whereby we have an input with name="file[]".
						The multiple rules checks if any of the input field is not empty!
					</li>
					<li>Unique
						This set of rules connect with the database and check if the value is available in the database, throws error is true.
					</li>
				</ul>
				<h3>The req method</h3>
				This method gives you whatever is coming in from the request may it GET or POST
				<h3>The val_req</h3>
				The val_req() method is similar to the to validator except that it helps remove the csrf and return to the request data.
				It takes optional arguments but we can also pass in to it our own set of rules for each request value
				<code>
					<i>// request data Array(id => 10, name => tlight)</i>

					$v->val_req(["number", true, "required" => true], ["required" => true]);
				</code>
				The moment you passed in a rule for an input value the rest is required.
				<h3>The Uploader</h3>
				This methods handles file uploads and also validate and check if the file is actually a media file. The following is file type accepted by this method.
				<code>
					['image/pjpeg', 'image/jpeg', 'image/gif', 'image/bmp', 'image/png', 'video/mpeg', 'video/mp4', 'video/quicktime', 'video/mpg', 'video/x-msvideo', 'video/x-ms-wmv', 'video/3ggp', 'audio/mid', 'audio/mp4', 'audio/mp3', 'audio/ogg', 'audio/wav', 'audio/3gpp', 'audio/mpeg']
				</code>
				And it accepts by default the max of 5 files, this can be changes in the <i>Config.php</i> file.
				You can check if there is any error in the upload process with the class pass() method. And if successful the file path is save in session name file and can be access by calling the session class Session::get("file");
				Alternatively, one can call the validate class complete_upload method to save the file, this method takes where to save the file as argument. And returns the full path to the file in case you want to save it in mysql database.
				<h3>Other useful methods</h3>
				<ul>
					<li>$v->error()
					Returns the error in validation process
					</li>
					<li>$v->pass()
						This check if there is error or not in the validation process
					</li>
					<li>$v->fetch()
						This fetch and validate any given value from the request e.g 
						<code>
							<i>// The request array(id => 2);</i>
							$v->fetch("id");
							<i> // this returns 2 </i>
						</code>
					</li>
					<li>$v->csrf()
					This is used to protect forms and to make sure that the request is from within the website.
					</li>
				</ul>
			</section>
			<section>
				<h1>The Session class</h1>
				The session class contains static methods and can call with Sessio::get();
				<u>To get session</u>
				<code>
					<i>// get all session</i>
					Session::get();
					<i>// get specific session</i>
					Session::get("user");
					<i>// returns the user session id</i>
				</code>
				<u>Setting session</u>
				<code>
					Session::set("user", 2);
				</code>
				<u>Check if session exists</u>
				<code>
					<i>// all session</i>
					Session::check();
					<i>// specific session</i>
					Session::check("user")
					<i>// true on success false on failure</i>
				</code>
				<u>Deleting session</u>
				<code>
					<i>// all session</i>
					Session::del();
					<i>// specific session</i>
					Session::del("user")
					<i>// no return value</i>
				</code>
			</section>
			<section>
				<h1>The Utils class</h1>
				This also contains static methods
				<u>Time</u>
				<code>
					<i>// time</i>
					Utils::time();
					<i>// good for blog time</i>
					<i>time_to_ago</i>
					Utils::time_to_ago($time, $check = false);
					<i>
						/*
						The 2nd argument is optional in case you are using mysql default datetime the 2nd argument should be true
						*/
					</i>
				</code>
				<u>Slug</u>
				This replace all the spaces with "-" good for removing spaces from url and seo.
				<code>
					Utils::slug("hello world");
					<i>// returns hello-world</i>
				</code>
				<u>Wordcount</u>
				This method returns by default 10 words from a give string;
				<code>
					<i>// $str = Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
					tempor incididunt ut labore et dolore magna aliqua.</i>
					Utils::wordcount($str);
					<i>// returns Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do...</i>
				</code>
				<u>arr_flat</u>
				This method takes 2 argument
				<ul>
					<li>The array</li>
					<li>what you want
						The values is default
						or the keys or both the value and the key
					</li>
				</ul>
				<u>json</u>
				This method changes array to json
				<u>djson</u>
				This method changes json to array and only array and not object. the normal behaviour of php json_decode();
				<u>get_type</u>
				This method takes a file path for argument and checks if the file is audio/video/image and returns the result.
				<u>media_html</u>
				Just like the get_type this collect a file full path and check if the file is audio/video/image and returns the html tags corresponding to it.
				<u>age</u>
				This method calculate age, it takes date as argument.
				<u>copy_r</u>
				This method copy files recursively even if the destination folder is not created!
			</section>
here;
			echo nl2br($doc);
			?>
	</article>
	<style type="text/css">
		
		body {
			background: #000;
			color: var(--text);
			font-size: 1.3rem !important;
		}

		.container {
			display: block;
		}

		code {
			display: block;
			border: 1px inset var(--sec);
			color: #a80a0a;
			padding: 4px;
			overflow-x: scroll;
		}

		code i {
			color: var(--sec);
			font-size: 16px;
		}

		u {
			display: block;
		}

		a {
			text-decoration: none;
			color: var(--link);
		}

		h1,
		h3 {
			color: var(--text);
			margin: 0;
			padding: 10px 0;
		}
		  
		h1 {
			font-size: 2rem;
		}
		p {
			margin: 5px
		}
		
		nav {
			background: var(--pry);
			display: grid;
			grid-auto-flow: column;
			justify-content: space-between;
			grid-gap: 1rem;
			align-items: center;
			padding: 1rem;
			position: relative;
		}

		.nav .dp-menu {
			padding: 5px;
			display: inline-block;
			cursor: pointer;
		}

		nav .logo {
			font-size: 2.5rem;
		}

		nav .logo a {
			color: var(--sec);
			font-style: italic;
		}

		nav .dp-menu span {
			display: block;
			background: var(--sec);
			padding: 2px .9rem;
			margin: 5px;
		}

		nav .dp-menu span:nth-child(even) {
			margin: 5px 0px 5px 5px;
		}
		
		nav .links {
			position: absolute;
			right: 0;
			top: 5rem;
			background: var(--pry);
			justify-content: end;
			width: 150px; 
			display: none;
		}

		nav .links a {
			display: block;
			padding: 1rem;
			color: var(--sec);
		}

		.links a:hover,
		.links a:focus {
			border-bottom: 2px solid var(--sec);
			margin-bottom: -2px;
		}

		@media (min-width: 576px) {
			nav {
				grid-template-columns: auto 2fr auto
			}
			.dp-menu {
				display: none;
				grid-column: 3;
				justify-self: start;
			}

			.links {
				position: static !important;
				width: auto !important;
				justify-self: end !important;
				display: grid !important;
				grid-auto-flow: column;
			}

			.links .menu-link {
				display: grid;
				grid-auto-flow: column !important;
			}

			.dp-link {
				position: static;
				right: 0;
				top: 5.6rem;
				background: var(--pry);
				display: grid !important;;
				grid-auto-flow: column !important;
				grid-row: 1/1;
			}
		}
	</style>
	<script type="text/javascript">
		$('.dp-menu').click(() => {
			if ($(window).innerWidth() >= 576) {
				$('.dp-link').slideToggle(500);
			} else {
				$('.links').slideToggle(500);
			}
		});

	</script>
	<?php require_once "inc/footer.php";